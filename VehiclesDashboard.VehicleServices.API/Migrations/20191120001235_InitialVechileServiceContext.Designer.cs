// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleDashboard.VehicleService.Data;

namespace VehiclesDashboard.VehicleServices.API.Migrations
{
    [DbContext(typeof(VehicleServiceDataContext))]
    [Migration("20191120001235_InitialVechileServiceContext")]
    partial class InitialVechileServiceContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("VehicleDashboard.VehicleService.Domain.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");

                    b.HasData(
                        new { CustomerId = 1, Address = "Cementvägen 8", City = "Södertälje", Name = "Kalles Grustransporter AB", PostalCode = "111 11" },
                        new { CustomerId = 2, Address = "Balkvägen 12", City = "Stockholm", Name = "Johans Bulk AB", PostalCode = "222 22" },
                        new { CustomerId = 3, Address = "Budgetvägen 1", City = "Uppsala", Name = "Haralds Värdetransporter AB", PostalCode = "333 33" }
                    );
                });

            modelBuilder.Entity("VehicleDashboard.VehicleService.Domain.Model.CustomerVehicle", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<string>("VehicleId");

                    b.Property<bool>("IsConnectedStatus");

                    b.Property<DateTime>("LastStatusModificationTime");

                    b.Property<string>("RegNo")
                        .IsRequired();

                    b.HasKey("CustomerId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CustomerVehicles");
                });

            modelBuilder.Entity("VehicleDashboard.VehicleService.Domain.Model.Vehicle", b =>
                {
                    b.Property<string>("VIN")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsDeleted");

                    b.HasKey("VIN");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new { VIN = "YS2R4X20005399401" },
                        new { VIN = "VLUR4X20009093588" },
                        new { VIN = "VLUR4X20009048066" },
                        new { VIN = "YS2R4X20005388011" },
                        new { VIN = "YS2R4X20005387949" },
                        new { VIN = "YS2R4X20005387055" }
                    );
                });

            modelBuilder.Entity("VehicleDashboard.VehicleService.Domain.Model.CustomerVehicle", b =>
                {
                    b.HasOne("VehicleDashboard.VehicleService.Domain.Model.Customer", "Customer")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VehicleDashboard.VehicleService.Domain.Model.Vehicle", "Vehicle")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
